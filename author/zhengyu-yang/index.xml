<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zhengyu Yang | Zijian Hu</title>
    <link>https://www.zijianhu.com/author/zhengyu-yang/</link>
      <atom:link href="https://www.zijianhu.com/author/zhengyu-yang/index.xml" rel="self" type="application/rss+xml" />
    <description>Zhengyu Yang</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sat, 19 Jun 2021 00:00:00 -0700</lastBuildDate>
    <image>
      <url>https://www.zijianhu.com/images/icon_hub8aaec6c2c2e1082c2b24756ea87d425_171065_512x512_fill_lanczos_center_2.png</url>
      <title>Zhengyu Yang</title>
      <link>https://www.zijianhu.com/author/zhengyu-yang/</link>
    </image>
    
    <item>
      <title>SimPLE: Similar Pseudo Label Exploitation for Semi-Supervised Classification</title>
      <link>https://www.zijianhu.com/publication/hu-2020-simple/</link>
      <pubDate>Sat, 19 Jun 2021 00:00:00 -0700</pubDate>
      <guid>https://www.zijianhu.com/publication/hu-2020-simple/</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;This paper is accepted by the 2021 Conference on Computer Vision and Pattern Recognition (CVPR).
We will release the full copy of the paper once we have the camera-ready version.
If you are interested in our project, you can email me to request a full copy of the paper.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#semi-supervised-learning&#34;&gt;Semi-supervised Learning&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#method&#34;&gt;Method&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#problem-description&#34;&gt;Problem Description&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#augmentation-strategy&#34;&gt;Augmentation Strategy&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#pseudo-labeling&#34;&gt;Pseudo-labeling&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#loss&#34;&gt;Loss&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#simple-algorithm&#34;&gt;SimPLE Algorithm&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Deep learning has recently achieved state-of-the-art performance on many computer vision tasks.
labeling large datasets is very expensive and often not feasible, especially in domains that require expertise to provide labels.
Semi-Supervised Learning (SSL), on the other hand, can take advantage of partially labeled data,
which is much more easily available,
as shown in Figure &lt;a href=&#34;#figure-illustration-of-an-image-set-with-a-limited-amount-of-labeled-images-among-a-large-number-of-unlabeled-images&#34;&gt;1&lt;/a&gt;, for example.&lt;/p&gt;






  



  
  











&lt;figure id=&#34;figure-illustration-of-an-image-set-with-a-limited-amount-of-labeled-images-among-a-large-number-of-unlabeled-images&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.zijianhu.com/publication/hu-2020-simple/images/problem_hue2b165cb1d98fede9488ffa362868af2_2811778_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Illustration of an image set with a limited amount of labeled images among a large number of unlabeled images.&#34;&gt;


  &lt;img data-src=&#34;https://www.zijianhu.com/publication/hu-2020-simple/images/problem_hue2b165cb1d98fede9488ffa362868af2_2811778_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;3328&#34; height=&#34;1500&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
    Illustration of an image set with a limited amount of labeled images among a large number of unlabeled images.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;semi-supervised-learning&#34;&gt;Semi-supervised Learning&lt;/h3&gt;
&lt;p&gt;A critical problem in semi-supervised learning is how to generalize the information learned from limited label data to unlabeled data.
Following the &lt;em&gt;continuity assumption&lt;/em&gt; that close data have a higher probability of sharing the same label, many approaches have been developed, including the recently proposed &lt;a href=&#34;https://arxiv.org/abs/1904.04717&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Label Propagation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another critical problem in semi-supervised learning is how to directly learn from the large amount of unlabeled data.
Maintaining consistency between differently augmented unlabeled data has been recently studied and proved to be an effective way to learn from unlabeled data in both self-supervised learning.&lt;/p&gt;
&lt;p&gt;The recently proposed &lt;a href=&#34;https://arxiv.org/abs/1905.02249&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MixMatch&lt;/a&gt; combines the above techniques and designed a unified loss term to let the model learn from differently augmented labeled and unlabeled data, together with the &lt;a href=&#34;https://openreview.net/forum?id=ByxtC2VtPB&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mix-up&lt;/a&gt; technique, which encourages convex behavior between samples to increase model&amp;rsquo;s generalization ability.
&lt;a href=&#34;https://openreview.net/forum?id=HklkeR4KPB&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ReMixMatch&lt;/a&gt; further improves the MixMatch by introducing the distribution alignment and Augmentation Anchoring techniques, which allows the model to accommodate and leverage from the heavily augmented samples.
&lt;a href=&#34;https://arxiv.org/abs/2001.07685&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FixMatch&lt;/a&gt; simplified its previous works by introducing a confidence threshold into its unsupervised objective function and achieves state-of-the-art performance over the standard benchmarks.&lt;/p&gt;
&lt;p&gt;In this paper, we propose to take advantage of the relationship between different unlabeled samples.
We introduce a novel Pair Loss, which encourages a pair of similar unlabeled samples (in the augmented space) to have similar predictions if at least one of them is of high confidence in its prediction.
Combining the techniques developed by the MixMatch family, we propose the SimPLE algorithm.
As shown in Figure &lt;a href=&#34;#figure-an-overview-of-the-proposed-simple-algorithm&#34;&gt;2&lt;/a&gt;, the SimPLE algorithm generates pseudo labels of unlabeled samples by averaging and sharpening the predictions on multiple weakly augmented variations of the same sample.&lt;/p&gt;






  



  
  











&lt;figure id=&#34;figure-an-overview-of-the-proposed-simple-algorithm&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.zijianhu.com/publication/hu-2020-simple/images/overview_hu7e6c5a87fea892f23597c7d6d500ed86_413333_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;An overview of the proposed SimPLE algorithm.&#34;&gt;


  &lt;img data-src=&#34;https://www.zijianhu.com/publication/hu-2020-simple/images/overview_hu7e6c5a87fea892f23597c7d6d500ed86_413333_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;3150&#34; height=&#34;1100&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
    An overview of the proposed SimPLE algorithm.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Then, we use both the labels and pseudo labels to compute the supervised cross-entropy loss and unsupervised $L2$ distance loss.
These two terms push the decision boundaries to go through low-density areas and encourage consistency among different variations of the same samples.
Finally, with the newly proposed Pair Loss, we harness the relationships among the pseudo labels of different samples by encouraging consistency among different unlabeled samples which share a great similarity.&lt;/p&gt;
&lt;h2 id=&#34;method&#34;&gt;Method&lt;/h2&gt;
&lt;p&gt;To take full advantage of the vast quantity of unlabeled samples in SSL problems, we propose the SimPLE algorithm that focuses on the relationship between unlabeled samples.&lt;/p&gt;
&lt;h3 id=&#34;problem-description&#34;&gt;Problem Description&lt;/h3&gt;
&lt;p&gt;We define the semi-supervised image classification problem as following. In a $L$-class classification setting, we have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\mathcal{X}=\left(\left(x_{b}, y_{b}\right) ; b \in(1, \ldots, B)\right)$: a batch of labeled data&lt;/li&gt;
&lt;li&gt;$\mathcal{U}=\left(u_{b} ; b \in(1, \ldots, B)\right)$: a batch of unlabeled data&lt;/li&gt;
&lt;li&gt;$\mathrm{p}_{\text{model}}\left(\tilde{y} \mid x ; \theta\right)$: the model&amp;rsquo;s predicted softmax class probability of input $x$ parameterized by weight $\theta$&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;augmentation-strategy&#34;&gt;Augmentation Strategy&lt;/h3&gt;
&lt;p&gt;Our algorithm uses Augmentation Anchoring, in which pseudo labels come from weakly augmented samples act as &amp;ldquo;anchor,&amp;rdquo; and we align the strongly augmented samples to the &amp;ldquo;anchor.&amp;rdquo;
Our weak augmentation, follows that of MixMatch family, contains a random cropping followed by a random horizontal flip.
We use &lt;a href=&#34;https://arxiv.org/abs/1909.13719&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RandAugment&lt;/a&gt; or a fixed augmentation strategy that contains difficult transformations such as random affine and color jitter as strong augmentation.
For every batch, RandAugment randomly selects a fixed number of augmentations from a predefined pool; the intensity of each transformation is determined by a magnitude parameter.&lt;/p&gt;
&lt;h3 id=&#34;pseudo-labeling&#34;&gt;Pseudo-labeling&lt;/h3&gt;
&lt;p&gt;Our pseudo labeling is based on the label guessing technique used in MixMatch. We first take the average of the model&amp;rsquo;s predictions of several weakly augmented versions of the same unlabeled sample as its pseudo label.
As the prediction is averaged from $K$ slight perturbations of the same input instead of $K$ severe perturbation or a single perturbation, the guessed pseudo label should be more stable.
Then, we use the sharpening operation defined in MixMatch to increase the temperature of the label&amp;rsquo;s distribution:
$$\operatorname{Sharpen}(p, T):= \frac{p^{\frac{1}{T}}}{\textbf{1}^\top p^{\frac{1}{T}}}$$&lt;/p&gt;
&lt;p&gt;As the peak of the pseudo label&amp;rsquo;s distribution is &amp;ldquo;sharpened,&amp;rdquo; the network will push this sample further away from the decision boundary.
Additionally, following the practice of MixMatch, we use the exponential moving average of the model at each time step to guess the labels.&lt;/p&gt;
&lt;h3 id=&#34;loss&#34;&gt;Loss&lt;/h3&gt;
&lt;p&gt;Our loss consists of three terms, $\mathcal{L_X}$, $\mathcal{L_U}$, and $\mathcal{L_P}$, representing the supervised loss, the unsupervised loss, and the Pair Loss respectively.&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
\mathcal{L} &amp;amp;= \mathcal{L_X} + \lambda_{\mathcal{U}} \mathcal{L_U} + \lambda_{\mathcal{P}} \mathcal{L_P} \\&lt;br&gt;
\mathcal{L_X} &amp;amp;= \frac{1}{\left| \mathcal{X}&#39; \right|} \sum_{x,y \in \hat{\mathcal{X}}} H\left(y, \mathrm{p}_{\text{model}}\left(\tilde{y} \mid x ; \theta\right)\right) \\&lt;br&gt;
\mathcal{L_U} &amp;amp;= \frac{
\sum_{u,q \in \hat{\mathcal{U}}}
\mathbb{1}_{\left(\max\left(q\right) &amp;gt; \tau_c\right)}
\left| q - \mathrm{p}_{\text{model}}\left(\tilde{y} \mid u ; \theta\right) \right|^{2}_{2}
}{L \left| \hat{\mathcal{U}} \right|}
\end{align}
$$&lt;/p&gt;
&lt;p&gt;$\mathcal{L_X}$ calculates the cross-entropy of weakly augmented labeled samples, and $\mathcal{L_U}$ represents the $L_2$ distance between strongly augmented samples and their pseudo labels, filtered by high confidence threshold.
Notice that $\mathcal{L_U}$ only enforces the consistency among different perturbations of the same samples but not the consistency among different samples.&lt;/p&gt;
&lt;p&gt;As we aim to exploit the relationship among unlabeled samples, we hereby introduce a novel loss term, Pair Loss, that allows information to propagate implicitly between different unlabeled samples.
In Pair Loss, we use a high confidence pseudo label of an unlabeled point, $p$, as an &amp;ldquo;anchor.&amp;rdquo;
All unlabeled samples whose pseudo labels are similar enough to $p$ need to align their predictions under severe perturbation to the &amp;ldquo;anchor.&amp;rdquo;&lt;/p&gt;






  



  
  











&lt;figure id=&#34;figure-pair-loss-overview&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.zijianhu.com/publication/hu-2020-simple/featured_hu4ae5f06fd090dbf90a6b38dbfa89063a_483332_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Pair Loss Overview.&#34;&gt;


  &lt;img data-src=&#34;https://www.zijianhu.com/publication/hu-2020-simple/featured_hu4ae5f06fd090dbf90a6b38dbfa89063a_483332_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;3182&#34; height=&#34;2469&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
    Pair Loss Overview.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Figure &lt;a href=&#34;#figure-pair-loss-overview&#34;&gt;3&lt;/a&gt; offers an overview of this selection process. During this process, the similarity threshold &amp;ldquo;extended&amp;rdquo; our confidence threshold in an adaptive manner, as a sample whose pseudo label confidence is below the threshold can still be selected by the loss and be pushed to a higher confidence level.
Formally, we defined the Pair Loss as following:&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
\mathcal{L_P} &amp;amp;= \frac{1}{\binom{K&amp;rsquo;B}{2}}
\sum_{
\substack{
i,j \in \left[\left|\mathcal{U}&#39;\right|\right], i \ne j \\&lt;br&gt;
\left(v_l, q_l\right) = \mathcal{U}&#39;_{i} \\&lt;br&gt;
\left(v_r, q_r\right) = \mathcal{U}&#39;_{j}
}
}
\varphi_{\tau_c}\left(\max\left(q_l\right)\right) \\&lt;br&gt;
&amp;amp;\cdot \varphi_{\tau_s}\left(f_{\operatorname{sim}}\left(q_l, q_r\right)\right) \\&lt;br&gt;
&amp;amp;\cdot f_{\operatorname{dist}}\left(q_l, \mathrm{p}_{\text{model}}\left(\tilde{y} \mid v_r ; \theta\right)\right)
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;Here, $\tau_c$ and $\tau_s$ denote the confidence threshold and similarity threshold respectively.
$\varphi_t(x)=\mathbb{1}_{\left(x &amp;gt; t\right)} x$ is a hard threshold function controlled by threshold $t$.
$f_{\operatorname{sim}}\left(p, q\right)$ measures the similarity between two probability vectors $p, q$ by &lt;a href=&#34;http://www.jstor.org/stable/25047882&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bhattacharyya coefficient&lt;/a&gt;.
The coefficient is bounded between $[0, 1]$, and represents the size of the overlapping portion of the two discrete distributions:&lt;/p&gt;
&lt;p&gt;$$f_{\operatorname{sim}}\left(p, q\right) = \sqrt{p} \cdot \sqrt{q}$$&lt;/p&gt;
&lt;p&gt;$f_{\operatorname{dist}}\left(p, q\right)$ measures the distance between two probability vectors $p, q$.
As $f_{\operatorname{sim}}\left(p, q\right)$ is bounded between $[0, 1]$, we simply choose the distance function to be $f_{\operatorname{dist}}\left(p, q\right) = 1 - f_{\operatorname{sim}}\left(p, q\right)$.&lt;/p&gt;
&lt;p&gt;Although based on analysis, we found that $\cos(\cos^{-1}(\sqrt{\tau_c})+\cos^{-1}(\tau_s))^2$ is the minimal confidence a label need to have for it to be selected by both thresholds, such low confidence label are rarely selected in practice.
Based on empirical evidence, we believe this is caused by the fact a label $p$ that can pass through the high confidence threshold typically has a near one hot distribution.
Thus, for another label $q$ to fall in the similarity threshold of $q$, it must also have relatively high confidence.
Due to this property, the Pair Loss is not very sensitive to the choices of hyperparameters $\tau_s$, $\tau_c$, which we will show empirically in later section.&lt;/p&gt;
&lt;h3 id=&#34;simple-algorithm&#34;&gt;SimPLE Algorithm&lt;/h3&gt;
&lt;p&gt;By putting together all the components introduced in this section, we now present the SimPLE algorithm.
During training, for a mini-batch of samples, SimPLE will first augment both labeled and unlabeled samples with both weak and strong augmentations.
The pseudo labels of the unlabeled samples are obtained by averaging and then sharpening the models&#39; predictions on the weakly augmented unlabeled samples.
Finally, we optimize the three loss terms based on augmented samples and pseudo labels.
During testing, SimPLE uses the exponential moving average of the weights of the model to do prediction, as what is done by MixMatch.
Figure &lt;a href=&#34;#figure-an-overview-of-the-proposed-simple-algorithm&#34;&gt;2&lt;/a&gt; gives an overview of the algorithm, and the complete training algorithm is described in Alg. &lt;a href=&#34;#figure-simple-algorithm&#34;&gt;1&lt;/a&gt;.&lt;/p&gt;






  



  
  











&lt;figure id=&#34;figure-simple-algorithm&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.zijianhu.com/publication/hu-2020-simple/images/algorithm1_hu53e17220f872f8c8eb187beb5c84338c_350636_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;SimPLE algorithm.&#34;&gt;


  &lt;img data-src=&#34;https://www.zijianhu.com/publication/hu-2020-simple/images/algorithm1_hu53e17220f872f8c8eb187beb5c84338c_350636_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1990&#34; height=&#34;1126&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    SimPLE algorithm.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;The experiment section will be updated soon&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Decentralized Federated Multi-Task Learning and System Design</title>
      <link>https://www.zijianhu.com/project/dpa_sgd/</link>
      <pubDate>Fri, 03 May 2019 00:00:00 -0700</pubDate>
      <guid>https://www.zijianhu.com/project/dpa_sgd/</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;This page contains a copy of the final report of our final project for Spring 2019 CSCI-599: Deep Learning and its Applications at the University of Southern California. The &lt;a href=&#34;http://fl.chaoyanghe.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;original page&lt;/a&gt; was removed&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#problem-formulation&#34;&gt;Problem formulation&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#statistical-challenges&#34;&gt;Statistical Challenges&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#system-challenges&#34;&gt;System Challenges&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#general-definition-of-federated-learning&#34;&gt;General Definition of Federated Learning&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#general-framework-of-federated-multi-task-learning&#34;&gt;General Framework of Federated Multi-Task Learning&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#federated-multi-task-deep-learning-framework&#34;&gt;Federated Multi-Task Deep Learning Framework&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#approach&#34;&gt;Approach&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#decentralized-periodic-averaging-sgd&#34;&gt;Decentralized Periodic Averaging SGD&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#algorithm&#34;&gt;Algorithm&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#advantages-of-our-algorithm&#34;&gt;Advantages of Our Algorithm&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#system-design&#34;&gt;System Design&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#comparison-to-previous-works&#34;&gt;Comparison to Previous Works&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#federated-multi-task-learning&#34;&gt;Federated Multi-Task Learning&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#stochastic-gradient-decent-optimization&#34;&gt;Stochastic Gradient Decent Optimization&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#results&#34;&gt;Results&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#appendix&#34;&gt;Appendix&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#appendix-i-convergence-analysis&#34;&gt;Appendix I: Convergence Analysis&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#appendix-ii-poster&#34;&gt;Appendix II: Poster&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;p&gt;In the cloud-based environment, distributed deep learning systems such as Tensorflow and PyTorch is widespread in various domains, but they are typically built based on the parameter server, which
requires data integrated into one place (a server or a cluster) to train a model[Dean &lt;em&gt;et al.&lt;/em&gt;; Li &lt;em&gt;et al.&lt;/em&gt;, 2014; Cui &lt;em&gt;et al.&lt;/em&gt;, 2014; Abadi &lt;em&gt;et al.&lt;/em&gt;, 2016; Paszke &lt;em&gt;et al.&lt;/em&gt;, 2017], as shown in Figure 1(a). Increasing
practical constraints lead this data integration difficult or impossible, including data privacy and confidentiality, intellectual property protection, and law constraints. A promising solution to these
problems is called Federated Learning [McMahan &lt;em&gt;et al.&lt;/em&gt;, 2016]. As shown in Figure 1(b), Federated Learning enables collaboratively training on edge devices or edge data centers through exchanging parameters or gradients without centralizing their scattered data (In this work, we use both worker and node to represent edge devices or edge data centers). Representative examples happen in various domains such as Mobile Internet, health, and finance domains [McMahan and Ramage, 2017, Liu &lt;em&gt;et al.&lt;/em&gt;, 2018a, Liu &lt;em&gt;et al.&lt;/em&gt;, 2018b].&lt;/p&gt;






  



  
  











&lt;figure id=&#34;figure-federated-multi-task-learning-topology-a-cloud-based-distributed-learning-b-centralized-federated-learning-c-decentralized-federated-learning-d-centralized-communication-topology-with-decentralized-parameter-exchanging-topology&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.zijianhu.com/project/dpa_sgd/images/introduction_hu3ada94327916f25607af6cbc5bb02ef8_300845_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Federated Multi-Task Learning Topology. (a) Cloud-Based Distributed Learning; (b) Centralized Federated Learning; (c) Decentralized Federated Learning; (d) Centralized Communication Topology with Decentralized Parameter Exchanging Topology.&#34;&gt;


  &lt;img data-src=&#34;https://www.zijianhu.com/project/dpa_sgd/images/introduction_hu3ada94327916f25607af6cbc5bb02ef8_300845_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1775&#34; height=&#34;1623&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
    Federated Multi-Task Learning Topology. (a) Cloud-Based Distributed Learning; (b) Centralized Federated Learning; (c) Decentralized Federated Learning; (d) Centralized Communication Topology with Decentralized Parameter Exchanging Topology.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;problem-formulation&#34;&gt;Problem formulation&lt;/h2&gt;
&lt;h3 id=&#34;statistical-challenges&#34;&gt;Statistical Challenges&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Non-IID&lt;/strong&gt;: Each worker generates data in a non-i.i.d. (independent and identically distributed) manner with a distinct statistical distribution.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unbalanced Local Data&lt;/strong&gt;: Workers have different quantity of data sample due to their different behaviors.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These two characteristics bring challenges to learning a high-performance personalized model for each worker.&lt;/p&gt;
&lt;h3 id=&#34;system-challenges&#34;&gt;System Challenges&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Larger Worker Number&lt;/strong&gt;: The worker number is typically larger than cloudbased learning. The larger number will pose a higher communication cost and difficult communication
synchronization.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Heterogeneous Networks&lt;/strong&gt;: Each worker may differ in communication capacity due to heterogeneous networks(4G, WiFi, and other IoT protocol).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Heterogeneous Computation&lt;/strong&gt;: Computational
capacities of each worker may differ due to variability in hardware(CPU, memory).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These three characteristics make communication cost and low-speed training become a major bottleneck towards real-world deployment.&lt;/p&gt;
&lt;p&gt;In practice, scattered data owners also demand personalized models rather than a global model for all owners. They hope to not only get help from other owners’ data to train a high accuracy model but also to gain their personalized models which can represent their unique data properties. Thus, to simultaneously address statistical and system challenges is the primary research direction of federated learning.&lt;/p&gt;






  



  
  











&lt;figure id=&#34;figure-federated-multi-task-deep-learning-framework&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.zijianhu.com/project/dpa_sgd/images/decentralizedFramework_hu58784681c8646995d497d2752388e320_131151_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Federated Multi-Task Deep Learning Framework&#34;&gt;


  &lt;img data-src=&#34;https://www.zijianhu.com/project/dpa_sgd/images/decentralizedFramework_hu58784681c8646995d497d2752388e320_131151_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;3006&#34; height=&#34;1017&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
    Federated Multi-Task Deep Learning Framework
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;general-definition-of-federated-learning&#34;&gt;General Definition of Federated Learning&lt;/h3&gt;
&lt;p&gt;Following the first federated learning paper McMahan &lt;em&gt;et al.&lt;/em&gt; [2016], we define the objective function for the federated setting as&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
F(\mathbf{w}) &amp;amp;= \sum_{k=1}^{K} \frac{n_k}{N} F_{k}(\mathbf{w}) \\&lt;br&gt;
&amp;amp;= \sum_{k=1}^{K} \frac{n_k}{N} \frac{1}{n_k} \sum_{i \in \mathcal{P}_{k}} l(\mathbf{x}_{i}, \mathbf{y}_{i}; \mathbf{w})
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;where $ l(\mathbf{x}_{i}, \mathbf{y}_{i}; \mathbf{w}) $ is the loss function of the prediction on example $(\mathbf{x}_{i}, \mathbf{y}_{i})$ made with model parameters $\mathbf{w}$, K is the total learning nodes number, $\mathcal{P}_{k}$ is the set of indexes of data points on node k, $n_k = |P_k|$, and $\sum_{k=1}^{K} n_{k} = N$. This objective function can capture the different quantity of samples and statistical distribution of K nodes. Here, different nodes learn the global model jointly, which showing as the same loss function $l$ and parameters $\mathbf{w}$.&lt;/p&gt;
&lt;h3 id=&#34;general-framework-of-federated-multi-task-learning&#34;&gt;General Framework of Federated Multi-Task Learning&lt;/h3&gt;
&lt;p&gt;As mentioned in the introduction, federated multi-task learning is a framework that can improve the performance by directly capturing the relationships among unbalanced data in multiple devices, which implies that it can address the statistical challenges in federated learning. The general formulation for federated multi-task learning is:&lt;/p&gt;
&lt;p&gt;$$
\min_{\mathbf{W}}\sum_{k=1}^{K}\frac{1}{n_k}\sum_{i=1}^{n_k}l_i(\mathbf{x}_i,\mathbf{y}_i;\mathbf{w}_k) + \mathcal{R}(\mathbf{W},\mathbf{\Omega}).
$$&lt;/p&gt;
&lt;p&gt;where $\mathbf{W} = (\mathbf{w}_1,\mathbf{w}_2,&amp;hellip;,\mathbf{w}_K) \in \mathbb{R}^{d \times{m}}$ is the parameters for different tasks and $\mathcal{R}(\mathbf{W},\mathbf{\Omega})$ is the regularization. Different multi-task framework is mainly different from the regularization term $\mathcal{R}$.&lt;/p&gt;
&lt;p&gt;The first term of the objective models the summation of different empirical loss of each node. The second term serves as a task-relationship regularizer with $\mathbf{\Omega}\in\mathbb{R}^{K\times{K}}$ being the covariance matrix Zhang and Yeung [2012].&lt;/p&gt;
&lt;p&gt;The covariance matrix is able to describe positive, negative and unrelated correlation between nodes, which can either known as priori or being measured while learning the models simultaneously.&lt;/p&gt;
&lt;p&gt;Each element $\mathbf{\Omega}_{i,j}$ is a value that indicates the similarity between two nodes. Here we use a bio-convex formulation in Zhang and Yeung [2012], which is a general case for other regularization methods,&lt;/p&gt;
&lt;p&gt;$$
\mathcal{R}(\mathbf{W},\mathbf{\Omega}) = \lambda_ 1tr(\mathbf{W}\mathbf{\Omega}^{-1}\mathbf{W}^{T}) + \lambda_2||\mathbf{W}||_F^2.
$$&lt;/p&gt;
&lt;p&gt;where we constrain $\vec{W}$ with covariance matrix $\mathbf{\Omega}^{-1}$ through matrix trace $tr(\mathbf{W}\mathbf{\Omega}^{-1}\mathbf{W}^{T})$. This means the closer $\mathbf{w}_i$ and $\mathbf{w}_j$ is, the larger the $\mathbf{\Omega}_{i,j}$ will be. Specifically if $\mathbf{\Omega}$ is an identity matrix, then each node is independent to each other.
Smith &lt;em&gt;et al.&lt;/em&gt; [2017] proposed MOCHA based on the above multi-task learning framework. However, MOCHA can only handle convex functions in federated multi-task learning settings, which can not be generated to non-convex deep learning models. Our work generates federated multi-task learning framework to the non-convex DNN setting.&lt;/p&gt;
&lt;h3 id=&#34;federated-multi-task-deep-learning-framework&#34;&gt;Federated Multi-Task Deep Learning Framework&lt;/h3&gt;
&lt;p&gt;DNNs are able to extract deep features from raw data. However, to the best of our knowledge, DNNs has not been applied to federated multi-task problems. We thus consider DNNs as our feature transformation function and make prediction based on the hidden features. Formally speaking, the formulation can be defined as:&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
&amp;amp; \begin{aligned} \min_{\mathbf{\theta}, \vec{U},\vec{W},\mathbf{\Omega}}
&amp;amp;\sum_{k=1}^{K}\frac{1}{n_k}\bigg[\bigg.\sum_{i=1}^{n_k}l(f(\vec{x}_i^{k},\mathbf{\theta}_k,\vec{U}_k,\vec{w}_k),\vec{y}_i^k) \\&lt;br&gt;
&amp;amp;+ \frac{1}{2}\lambda_ 1tr(\vec{W}_k\mathbf{\Omega}_k^{-1}\vec{W}_k^{T})\bigg]\bigg. + \frac{1}{2}\lambda_2||\vec{W}||_F^2\\&lt;br&gt;
&amp;amp;+\frac{1}{2}\lambda_3||\mathbf{\theta}||_F^2 + \frac{1}{2}\lambda_4||\vec{U}||_F^2, \end{aligned} \\&lt;br&gt;
&amp;amp; \quad \text{s.t.} \quad  \mathbf{\Omega}_k \ge 0 \quad \text{and} \quad tr(\mathbf{\Omega}_k) = 1, \quad k = 1, 2, &amp;hellip; ,K.
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;where $f(\cdot)$ represents DNNs feature mapping as shown in Figure 2(b). $\mathbf{\theta}_k$ is the feature transformation network. $\mathbf{U}_k$ and $\vec{w}_k$ are output layer (e.g. softmax). The first constraint holds due to the fact that $\mathbf{\Omega}$ is defined as a task covariance matrix. The second constraint is used to restrict its complexity.&lt;/p&gt;
&lt;p&gt;In federated learning situation, training should be conducted on each node respectively. One intuitive thought is the centralized network topology in McMahan &lt;em&gt;et al.&lt;/em&gt; [2016], where one center node synchronously takes a weighted average parameters of every clients at each time step (Figure 2(a)). However,  this model faces the problems that in DNNs situation, far more parameters need to be calculated and transferred. Each node has heterogeneous computing performance and network bandwidth (Figure (b)). Setting one center node to synchronously collect all the parameters will induce high communication cost and low convergence speed. In order to overcome these problems, we design a decentralized topology, where each node only needs to share their parameters with neighbored nodes as shown in Figure 2(c)), where there is no communication between worker one and worker 4. Abandoning the central node induces the problem that parameters cannot be exchanged and synchronized amongst every nodes, which means that the centralized optimization method can not be achieved on this topology. To this end, we propose a Decentralized Periodic Averaging SGD (DPA-SGD) to tackle the optimization problem in decentralized topology.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;approach&#34;&gt;Approach&lt;/h2&gt;
&lt;h3 id=&#34;decentralized-periodic-averaging-sgd&#34;&gt;Decentralized Periodic Averaging SGD&lt;/h3&gt;
&lt;p&gt;As for decentralized topology, due to the disappearing of central node, same central averaging method can not be applied. In order to overcome this problem, we come up with a novel optimization method, Decentralized Periodic Averaging SGD (DPA-SGD). The main idea of DPA-SGD is that during the communication period $\tau$, local SGD is applied on each node respectively, and synchronizing all the parameters at every $\tau$ iterations amongst its connected neighbors. Due to this decentralized diverse connection, one global $\mathbf{\Omega}$ can not represent the individual correlation. So we propose to use a distinct covariance matrix $\mathbf{\Omega}_k$ to represent their own mutual relationship. We also come up with an effective way to update the different $\mathbf{\Omega}_k$. To be specific, consider one particular node $m$ and its neighbor connected nodes as set $\mathcal{M}$.&lt;/p&gt;
&lt;p&gt;The new objective function can be defined as:&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
&amp;amp; \begin{aligned} \min_{\mathbf{\theta}, \vec{U},\vec{W},\mathbf{\Omega}}
&amp;amp;\sum_{k=1}^{K}\frac{1}{n_k}\bigg[\bigg.\sum_{i=1}^{n_k}l(f(\vec{x}_i^{k},\mathbf{\theta}_k,\vec{U}_k,\vec{w}_k),\vec{y}_i^k) \\&lt;br&gt;
&amp;amp;+ \frac{1}{2}\lambda_ 1tr(\vec{W}_k\mathbf{\Omega}_k^{-1}\vec{W}_k^{T})\bigg]\bigg. + \frac{1}{2}\lambda_2||\vec{W}||_F^2\\&lt;br&gt;
&amp;amp;+\frac{1}{2}\lambda_3||\mathbf{\theta}||_F^2 + \frac{1}{2}\lambda_4||\vec{U}||_F^2, \end{aligned} \\&lt;br&gt;
&amp;amp; \quad \text{s.t.} \quad  \mathbf{\Omega}_k \ge 0 \quad \text{and} \quad tr(\mathbf{\Omega}_k) = 1, \quad k = 1, 2, &amp;hellip; ,K.
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;where $\vec{W}_k = (\vec{w}_1,\vec{w}_2,&amp;hellip;,\vec{w}_m,&amp;hellip;\vec{w}_{|\mathcal{M}|})\in\mathbb{R}^{d\times|\mathcal{M}|}$ is the parameters for $m$ and its neighbor tasks. The matrix $\mathbf{\Omega}_k\in\mathbb{R}^{|\mathcal{M}|\times{|\mathcal{M}|}}$ represents the correlation amongst nodes in set $\mathcal{M}$. Here in order to record the entire nodes connection in the network, we introduce a &lt;em&gt;node connection matrix&lt;/em&gt; $\vec{M}\in\mathbb{R}^{K\times{K}}$ represents the neighbor relationships for each nodes, where $M_{i, j}$ is a value that indicates node $i$ and $j$ are connected as shown in Figure 3, where worker one is only connected with worker two and four. Note that, if $\vec{M} = \vec{I}$ (Identity matrix), then every nodes are independent and update the parameters respectively. If $\vec{M} = \vec{J}$ (one for each element), the model is degenerated into centralized model. We study the model performance under sparse matrix $\vec{M}$ and find that similar results can be achieved as a ring network topology, which each node is only connected with its nearby two nodes, as illustrated in Figure 3.&lt;/p&gt;






  



  
  











&lt;figure id=&#34;figure-decentralized-periodic-averaging-sgd&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.zijianhu.com/project/dpa_sgd/images/decentralizedSGD_huba6fab2315ef5e6a14b9cf31294d583a_115107_2000x2000_fit_q75_lanczos.jpg&#34; data-caption=&#34;Decentralized Periodic Averaging SGD&#34;&gt;


  &lt;img data-src=&#34;https://www.zijianhu.com/project/dpa_sgd/images/decentralizedSGD_huba6fab2315ef5e6a14b9cf31294d583a_115107_2000x2000_fit_q75_lanczos.jpg&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;961&#34; height=&#34;454&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
    Decentralized Periodic Averaging SGD
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;To solve this non-convex problem, we apply the alternating optimization method  Zhang and Yeung [2012], where alternately updating parameters $\vec{X} = (\vec{W, U},\mathbf{\theta})$ and $\mathbf{\Omega}$.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Optimizing&lt;/em&gt; $\mathbf{\theta}, \vec{W}$ and $\vec{U}$: For simplicity, we define set $\Xi = (\mathbf{\Omega}_1, \mathbf{\Omega}_2,&amp;hellip;,\mathbf{\Omega_K})$ to represent the correlation matrix for every nodes. Fixing $\Xi$, we can use SGD method to update $\mathbf{\theta}, \vec{W}$ and $\vec{U}$ jointly. Our problem can then be reformulated as:&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
G(\vec{W}, \vec{U}, \mathbf{\theta}|\Xi) &amp;amp;= \sum_{k=1}^{K}\frac{1}{n_k} \bigg[\bigg.
\sum_{i=1}^{n_k}l(f(\textbf{x}_i^{k},\mathbf{\theta}_k,\textbf{U}_k,\textbf{w}_k),\textbf{y}_i^k) \\&lt;br&gt;
&amp;amp; + \frac{1}{2} \lambda_1tr(\textbf{W}_k\mathbf{\Omega}_k^{-1}\textbf{W}_k^{T})
\bigg]\bigg. + \frac{1}{2}\lambda_2||\textbf{W}||_F^2 \\&lt;br&gt;
&amp;amp;+ \frac{1}{2}\lambda_3||\mathbf{\theta}||_F^2 + \frac{1}{2}\lambda_4||\textbf{U}||_F^2
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;We can calculate the gradient of $\vec{W}$, $\vec{U}$ and $\mathbf{\theta}$ respectively. Let $L = \sum_{k=1}^{K}\frac{1}{n_k}\sum_{i=1}^{n_k}l(f(\mathbf{x}_i^{k}, \mathbf{\theta}_k,\mathbf{u}_k,\mathbf{w}_k),\mathbf{y}_i^k)$. Then the gradient formulations for each node are:&lt;/p&gt;
&lt;p&gt;$$
\frac{\partial{G(\vec{W}, \vec{U}, \mathbf{\theta}|\Xi)}}{\partial{\vec{w}_k}} =
\frac{\partial{L}}{\partial{\vec{w}_k}} +
\lambda_1\sum_{i=1}^{\mathcal{|M|}} \frac{1}{n_i}{\vec{w}_k}\mathbf{\Omega}_i^{-1} +
\lambda_2\vec{w}_k
$$&lt;/p&gt;
&lt;p&gt;where the summation is amongst all the nodes connected to node $k$,&lt;/p&gt;
&lt;p&gt;$$
\frac{\partial{G(\vec{W}, \vec{U}, \mathbf{\theta}|\Xi)}}{\partial \mathbf{\theta}_k} = \frac{\partial{L}}{\partial\mathbf{\theta}_k} + \lambda_3\mathbf{\theta}_k,
$$&lt;/p&gt;
&lt;p&gt;$$
\frac{\partial{G(\vec{W}, \vec{U}, \mathbf{\theta}|\Xi)}}{\partial{\vec{u}_k}} = \frac{\partial{L}}{\partial{\vec{u}_k}} + \lambda_4\vec{u}_k
$$&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Optimizing&lt;/em&gt; $\Xi$: In paper Zhang and Yeung [2012], an analytical solution form is given for $\mathbf{\Omega}$:&lt;/p&gt;
&lt;p&gt;$$
\mathbf{\Omega} = \frac{(\vec{W}^T\vec{W})^\frac{1}{2}}{tr((\vec{W}^T\vec{W})^{\frac{1}{2}})}
$$&lt;/p&gt;
&lt;p&gt;Apparently, if $\mathbf{w}_i$ and $\mathbf{w}_j$ are close to each other, $\mathbf{\Omega}$ will be large. However, the missing central node forbidding to average parameters globally. So here we propose a novel way to update each $\mathbf{\Omega}_k\in\Xi$:&lt;/p&gt;
&lt;p&gt;$$
\mathbf{\Omega}_{t+1}^{(k)} \leftarrow \eta\frac{1}{|\mathcal{M}|}({\sum_{i=1}^{|\mathcal{M}|}}\frac{1}{n_i}\mathbf{\Omega}_{t}^{(i)} + \frac{(\vec{W}_k^T\vec{W}_k)^\frac{1}{2}}{tr((\vec{W}_k^T\vec{W}_k)^{\frac{1}{2}})})
$$&lt;/p&gt;
&lt;p&gt;The first averaging term can incorporate the nearby nodes correlation into its own and the second term captures the new correlation between its neighbors as shown in Figure 3.&lt;/p&gt;
&lt;h3 id=&#34;algorithm&#34;&gt;Algorithm&lt;/h3&gt;
&lt;p&gt;In general, the algorithm of DPA-SGD can be summarized as: while in local update period, each node calculates the gradient $g(\vec{X}_t^{(i)})$ based on one mini-batch of data and then update $\vec{X}^{(i)}$; For every synchronization per $\tau$ update, the novel update way of $\mathbf{\Omega}$ is conducted.&lt;/p&gt;






  



  
  











&lt;figure id=&#34;figure-algorithm-1-federated-multi-task-deep-learning-framework-with-decentralized-averaging-sgd&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.zijianhu.com/project/dpa_sgd/images/algorithm1_huebfc1ec7eb44c05c128ffe140125722d_379297_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;&amp;lt;strong&amp;gt;Algorithm 1&amp;lt;/strong&amp;gt;: Federated Multi-Task Deep Learning Framework with Decentralized Averaging SGD&#34;&gt;


  &lt;img data-src=&#34;https://www.zijianhu.com/project/dpa_sgd/images/algorithm1_huebfc1ec7eb44c05c128ffe140125722d_379297_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;2508&#34; height=&#34;1684&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    &lt;strong&gt;Algorithm 1&lt;/strong&gt;: Federated Multi-Task Deep Learning Framework with Decentralized Averaging SGD
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;advantages-of-our-algorithm&#34;&gt;Advantages of Our Algorithm&lt;/h3&gt;
&lt;p&gt;Here we illustrate system-wise advantages of DPA-SGD:&lt;/p&gt;






  



  
  











&lt;figure id=&#34;figure-illustration-of-training-time-reducing-due-to-the-mechanism-of-dpa-sgd&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.zijianhu.com/project/dpa_sgd/images/advantage_huca52a4d98cc084a2f136be1565963362_287468_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Illustration of training time reducing due to the mechanism of DPA-SGD&#34;&gt;


  &lt;img data-src=&#34;https://www.zijianhu.com/project/dpa_sgd/images/advantage_huca52a4d98cc084a2f136be1565963362_287468_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;2184&#34; height=&#34;1684&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
    Illustration of training time reducing due to the mechanism of DPA-SGD
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Faster convergence speed&lt;/strong&gt;. Figure 4 illustrates three reasons that DHA-SGD can speed up convergence.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Periodic averaging&lt;/em&gt; can alleviate the communication delay by reducing times of synchronization which only happen periodically. As we can see in Figure 4, the yellow blocks (communication) will largely be deleted due to the periodic averaging mechanism.&lt;/li&gt;
&lt;li&gt;This idle time can also be significantly reduced through periodic averaging as shown in Figure 4.&lt;/li&gt;
&lt;li&gt;In the decentralized topology, because a worker only needs to exchange gradients with its neighbors, another worker with slow computation and communication will not interrupt its iteration. For example, worker 2 in the above figure can synchronize earlier without waiting for worker 4. Thus, DHA-SGD can largely reduce convergence time.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Fewer communication rounds&lt;/strong&gt;. The periodic averaging strategy can reduce the number of communication rounds. Although our work focuses on optimizing the ratio of computation and communication rather than improving the communication cost for each iteration, gradient compression method (Deep Gradient Compression [Lin &lt;em&gt;et al.&lt;/em&gt;, 2017]) for each iteration can directly extendable to to our algorithm in a practical system.&lt;/p&gt;
&lt;h3 id=&#34;system-design&#34;&gt;System Design&lt;/h3&gt;






  



  
  











&lt;figure id=&#34;figure-federated-learning-system-design-and-protocol&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.zijianhu.com/project/dpa_sgd/images/system1_hu83de1cf0503563fdaf62e3d336a68002_546718_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Federated Learning System Design and Protocol&#34;&gt;


  &lt;img data-src=&#34;https://www.zijianhu.com/project/dpa_sgd/images/system1_hu83de1cf0503563fdaf62e3d336a68002_546718_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1536&#34; height=&#34;1380&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
    Federated Learning System Design and Protocol
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;We have developed a real-world decentralized federated learning system. Our system is currently deployed in a cluster environment, consisting of 24 physical machines, each supporting 48 CPU cores. Suppose we run one process per CPU core, this system can run up to 1152 workers for parallel training. Our federated learning system enables centralized and decentralization training while supporting the Federated multi-task learning framework. It also supports user and training management in the Federated Learning scenario. As shown in Figure 5 (Upper), it includes training process management such as topology generation, user selection, configuration dispatching, on-device training, and statistics collection. In the topological generation step, we can select the appropriate eigenvalues for the topology matrix according to our the convergence property analysis, which determines the sparseness of the network topology to balance the model accuracy and the training speed. The user selection process can configure different strategies to select distinct users. Each user only requires training once for a model. In our experiment, users are selected according to the LEAF data set. This process can be further optimized in the future to choose users who are more meaningful to the model.&lt;/p&gt;
&lt;p&gt;The software architecture of each worker is shown in Figure 5 (Lower). Each work can be an IoT device, smartphone or the edge server.  It is an abstract architecture design for the on-device software system which unifies the system architecture for different on-device operating systems such as Android or iOS for the smartphone and the linux edge server. For the edge server, we implement this system design in a Python environment. For the smartphone, we develop the training worker system based on Android and iOS. The low-level communication is an abstract layer. In the edge server environment, we use the MPI protocol for exchanging gradient or other necessary information. As we can see, the communication sending and receiving threads are independent of the training threads. The collaborate through message queues. Currently, we only disclose the implementation of the MPI communication protocol in the source code. In the future, we consider open source our code to support more on-device platforms.&lt;/p&gt;
&lt;p&gt;To put it simply, another contribution of this paper is that we publish a practical federated learning system that can promote further research on distributed learning and especially federated learning.&lt;/p&gt;
&lt;h2 id=&#34;comparison-to-previous-works&#34;&gt;Comparison to Previous Works&lt;/h2&gt;
&lt;h3 id=&#34;federated-multi-task-learning&#34;&gt;Federated Multi-Task Learning&lt;/h3&gt;
&lt;p&gt;Early examples of research into federated learning. To address both statistical and system challenges, [Smith &lt;em&gt;et al.&lt;/em&gt;, 2017] and [Caldas &lt;em&gt;et al&lt;/em&gt;. 2018] propose a multi-task learning framework for federated learning and its related optimization algorithm, which extends early works from distributed machine learning, including SDCAShalev-Shwartz and Zhang [2013]; Yang [2013]; Yang &lt;em&gt;et al.&lt;/em&gt; [2013] and COCOAJaggi &lt;em&gt;et al.&lt;/em&gt; [2014]; Ma &lt;em&gt;et al.&lt;/em&gt; [2015]; Smith &lt;em&gt;et al.&lt;/em&gt; [2016]. The main limitation of Smith &lt;em&gt;et al.&lt;/em&gt; [2017] and Caldas &lt;em&gt;et al.&lt;/em&gt; [2018], however, is that &lt;strong&gt;strong duality is only guaranteed when the objective function is convex, which can not be generalized to the non-convex setting, especially deep neural networks&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Another line of work related to federated multi-task learning is the cloud-based distributed multi-task learning [Ahmed &lt;em&gt;et al.&lt;/em&gt;, 2014; Jin &lt;em&gt;et al.&lt;/em&gt;, 2015; Mateos-Núñez &lt;em&gt;et al.&lt;/em&gt;, 2015; Wang &lt;em&gt;et al.&lt;/em&gt;, 2016; Baytas &lt;em&gt;et al.&lt;/em&gt;, 2016; Liu &lt;em&gt;et al.&lt;/em&gt;, 2017]. However, &lt;strong&gt;their assumption that the same amount of work is done locally on each node is prohibitive in federated settings&lt;/strong&gt;, and none of these works take into account the systems challenges that arise in the federated setting.&lt;/p&gt;
&lt;p&gt;In our work, we focus on training the deep learning model in the federated setting. To be more specific, &lt;strong&gt;in this work we further extend previous works to a generic multi-task deep learning framework and a more efficient optimization method. Different from previous works, we propose a decentralized approach for federated learning&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;stochastic-gradient-decent-optimization&#34;&gt;Stochastic Gradient Decent Optimization&lt;/h3&gt;
&lt;p&gt;In large scale distributed deep learning, to address the communication bottleneck, synchronized mini-batch SGD, which increase the computation to communication ratio, is widely used in the parameter server framework [Dean &lt;em&gt;et al.&lt;/em&gt;; Li &lt;em&gt;et al.&lt;/em&gt;, 2014; Cui &lt;em&gt;et al.&lt;/em&gt;, 2014] and popular deep learning systems such as Tensorflow [Abadi &lt;em&gt;et al.&lt;/em&gt;, 2016] and PyTorch [Paszke &lt;em&gt;et al.&lt;/em&gt;, 2017].&lt;/p&gt;
&lt;p&gt;Compared to this synchronized mini-batch SGD, Federated Averaging(FedAvg) SGD [Koneˇcný &lt;em&gt;et al.&lt;/em&gt;, 2016] in the federated setting empirically shows it has less communication rounds and it is also robust to non-IID data, which is now the state-of-the-art SGD algorithm for federated learning.&lt;/p&gt;
&lt;p&gt;Decentralized SGD, another approach to reducing communication, was successfully applied to deep learning [Jin &lt;em&gt;et al.&lt;/em&gt;, 2016; Jiang &lt;em&gt;et al.&lt;/em&gt;, 2017; Lian &lt;em&gt;et al.&lt;/em&gt;, 2017]. Instead of synchronizing with all workers, a worker in the decentralized SGD framework only needs to exchange gradient with its neighbors. Therefore, this sparse-connected topology can reduce the overall communication per iteration.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Our work aims to design a novel SGD algorithm for our multi-task deep learning framework&lt;/strong&gt;, which &lt;strong&gt;can leverage the advantages of periodic averaging SGD and decentralized SGD&lt;/strong&gt;. We called it as Decentralized Periodic Averaging SGD. Although recent work [Wang and Joshi, 2018] has this idea preliminarily, it does not provide adequate theoretical analysis and empirical evaluation in the federated setting.&lt;/p&gt;
&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;
&lt;div style=&#34;overflow: auto;&#34;&gt;&lt;table id=&#34;leafdata-table&#34;&gt;&lt;tr&gt;&lt;th&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;Dataset&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;Number of devices&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;Total samples&lt;/span&gt;&lt;/th&gt;&lt;th colspan=&#34;2&#34;&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;Sample per device&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;mean&lt;/td&gt;&lt;td&gt;stdev&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;FEMNIST&lt;/td&gt;&lt;td&gt;3,550&lt;/td&gt;&lt;td&gt;805,263&lt;/td&gt;&lt;td&gt;226.83&lt;/td&gt;&lt;td&gt;88.94&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Sent140&lt;/td&gt;&lt;td&gt;660,120&lt;/td&gt;&lt;td&gt;1, 600, 498&lt;/td&gt;&lt;td&gt;2.42&lt;/td&gt;&lt;td&gt;4.71&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Shakespeare&lt;/td&gt;&lt;td&gt;2,288&lt;/td&gt;&lt;td&gt;106, 126&lt;/td&gt;&lt;td&gt;46.38&lt;/td&gt;&lt;td&gt;91.71&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;This table is a brief statistic of the dataset (LEAF) that we are using in the experiments. To be specific, FEMNIST is a handwritten digit database, where image classification problem can be conducted based on this dataset. Sent140 is a text dataset, which allows you to discover the sentiment of a brand or product. Shakespeare is also a text dataset, however the objective here is try to learn the pattern of the sentences and generate similar text style.&lt;/p&gt;






  



  
  











&lt;figure id=&#34;figure-accuracy-for-fedavg-single-task-and-ring-dpa-sgd-multi-task-vs-round-number&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.zijianhu.com/project/dpa_sgd/images/results/acc2-round_number_hu1b1935e33a88baa3b47754e16403a12d_48889_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Accuracy for FedAvg Single-task and Ring DPA-SGD Multi-task vs Round number&#34;&gt;


  &lt;img data-src=&#34;https://www.zijianhu.com/project/dpa_sgd/images/results/acc2-round_number_hu1b1935e33a88baa3b47754e16403a12d_48889_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;624&#34; height=&#34;520&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Accuracy for FedAvg Single-task and Ring DPA-SGD Multi-task vs Round number
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;We compare the performance between FedAvg, the current state-of-the-art Federated Learning algorithm, and our DPA-SGD on Multi-Task Learning Framework (DPA-SGD-MTL) with a ring topology network. From the Figure, we clearly see that the training speed is around 20% faster than the FedAvg. The Ring DPA-SGD-MTL’s accuracy is also comparable to the FedAvg.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;





  



  
  











&lt;figure id=&#34;figure-accuracy-for-fedavg-mtl-and-dpa-sgd-mtl-vs-walk-clock-time&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.zijianhu.com/project/dpa_sgd/images/results/acc1-time_huf55eceac0cc195dd4c9e2c46301c67c2_47880_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Accuracy for FedAvg-MTL and DPA-SGD MTL vs walk clock time&#34;&gt;


  &lt;img data-src=&#34;https://www.zijianhu.com/project/dpa_sgd/images/results/acc1-time_huf55eceac0cc195dd4c9e2c46301c67c2_47880_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;634&#34; height=&#34;503&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Accuracy for FedAvg-MTL and DPA-SGD MTL vs walk clock time
  &lt;/figcaption&gt;


&lt;/figure&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;





  



  
  











&lt;figure id=&#34;figure-accuracy-for-fedavg-mtl-and-dpa-sgd-mtl-vs-round-number&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.zijianhu.com/project/dpa_sgd/images/results/acc1-round_number_hubf99043acb542c03ffabbe3bd8a40698_46387_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Accuracy for FedAvg-MTL and DPA-SGD MTL vs round number&#34;&gt;


  &lt;img data-src=&#34;https://www.zijianhu.com/project/dpa_sgd/images/results/acc1-round_number_hubf99043acb542c03ffabbe3bd8a40698_46387_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;662&#34; height=&#34;503&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Accuracy for FedAvg-MTL and DPA-SGD MTL vs round number
  &lt;/figcaption&gt;


&lt;/figure&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We also compared the performance between FedAvg on Multi-Task Learning Framework (FedAvg-MTL) and our DPA-SGD on Multi-Task Learning Framework (Ring DPA-SGD-MTL) with a ring topology network. From the Figure, we clearly see that the training speed is around 20% faster than the FedAvg-MTL. The Ring DPA-SGD-MTL’s accuracy is slightly lower but comparable than the FedAvg-MTL . This proves that our convergence analysis that when decentralized the topology of the gradient exchanging, due to the sparsity of the topology has a negative impact on the convergence of the model. We have to balance the performance of the model and the training speed in the federated learning setting.&lt;/p&gt;
&lt;p&gt;We will conduct more experiment on model performance and training speed on communication and computation heterogeneous setting (delay = 0ms, 300ms, 1s, 3s), different number of works (4, 8, 16, 32, 64, 128, 256, 512), and different topologies (0.3, 0.6, 0.9). Hopefully, we can finish these experiments before the NeurIPS deadline.&lt;/p&gt;
&lt;h2 id=&#34;appendix&#34;&gt;Appendix&lt;/h2&gt;
&lt;h3 id=&#34;appendix-i-convergence-analysis&#34;&gt;Appendix I: Convergence Analysis&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Convergence of DPA-SGD&lt;/strong&gt;: If the communication period $\tau$ satisfies:&lt;/p&gt;
&lt;p&gt;$$
T \geq K^{3} \left( \frac{1+\zeta^{2}}{1-\zeta^{2}} \tau - 1 \right)^{2}
$$&lt;/p&gt;
&lt;p&gt;then with learning rate $\eta = \frac{K}{LK} \sqrt{\frac{K}{T}}$ , the average-squared gradient norm after K iterations is bounded by&lt;/p&gt;
&lt;p&gt;$$
\mathbb{E} \Bigg[ \frac{1}{T} \sum\limits_{t=1}^T {\left\lVert \nabla F(\vec u_{t}) \right\rVert}^{2} \Bigg] \leq \frac{2[F(\vec{x}_{1})-F_{inf}]}{\eta T} + \frac{2\sigma^{2}}{\sqrt{KT}} \
= \mathcal{O}(\frac{1}{\sqrt{KT}})
$$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How to choose $\tau$, $\zeta$&lt;/strong&gt;: for a small number of well-connected workers, larger $\tau$ is more preferable; for a large number of workers, using a sparse mixing matrix and small $\tau$ gives
better convergence.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Effect of Extreme Large $K$&lt;/strong&gt;: the iteration number T will be extreme large. To guaran-tee the convergence, try to reduce the worker number through system-wised optimization:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Streaming training&lt;/li&gt;
&lt;li&gt;upload on-device data to the edge data center.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;appendix-ii-poster&#34;&gt;Appendix II: Poster&lt;/h3&gt;
&lt;figure&gt;&lt;a href=&#34;attachments/fl-dpa-sgd-poster.pdf&#34;&gt;&lt;img src=&#34;images/fl-dpa-sgd-poster.png&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;Poster (click to see the pdf)&lt;/figcaption&gt;&lt;/figure&gt;
</description>
    </item>
    
  </channel>
</rss>
